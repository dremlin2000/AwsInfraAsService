AWSTemplateFormatVersion: 2010-09-09
Description: Deploy Infrastructure

Parameters:
  SSHFrom:
    Description: Limit SSH access to bastion hosts to a CIDR IP block
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0

  ELBIngressPort:
    Description: The ELB ingress port used by security groups
    Type: Number
    MinValue: 0
    MaxValue: 65535
    ConstraintDescription: TCP ports must be between 0 - 65535
    Default: 80

  AppIngressPort:
    Description: The application ingress port used by security groups
    Type: Number
    MinValue: 0
    MaxValue: 65535
    ConstraintDescription: TCP ports must be between 0 - 65535
    Default: 80

  UseEc2InstanceInsteadOfNatGateway:
    Description: Set to true to only install one NAT gateway
    Type: String
    ConstraintDescription: Value must be true or false
    Default: true
    AllowedValues:
      - true
      - false

  SingleNatGateway:
    Description: Set to true to only install one NAT gateway
    Type: String
    ConstraintDescription: Value must be true or false
    Default: true
    AllowedValues:
      - true
      - false

  NATInstanceType:
    Description: NET Device EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.micro
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.xlarge
    - m3.2xlarge
    - c1.medium
    - c1.xlarge
    - cc1.4xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  NatEc2KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the NAT instance
    ConstraintDescription: must be the name of an existing EC2 KeyPair

Mappings:
  AWSNATAMI:
    us-east-1:
      AMI: ami-c6699baf
    us-west-2:
      AMI: ami-52ff7262
    us-west-1:
      AMI: ami-3bcc9e7e
    eu-west-1:
      AMI: ami-0b5b6c7f
    ap-southeast-1:
      # AMI: ami-02eb9350
      AMI: ami-00c1445796bc0a29f
    ap-southeast-2:
      # AMI: ami-ab990e91
      AMI: ami-00c1445796bc0a29f
    ap-northeast-1:
      AMI: ami-14d86d15
    sa-east-1:
      AMI: ami-0439e619

Conditions:
  UseNatGatewayCondition: !Equals [!Ref UseEc2InstanceInsteadOfNatGateway, false]

  UseEc2InstanceAsNatGateway: !Equals [!Ref UseEc2InstanceInsteadOfNatGateway, true]

  CreateSingleNatGateway: !And
    - !Equals [ !Ref UseEc2InstanceInsteadOfNatGateway, false ]
    - !Equals [!Ref SingleNatGateway, true]
  
  CreateMultipleNatGateways: !And
    - !Equals [ !Ref UseEc2InstanceInsteadOfNatGateway, false ]
    - !Not [Condition: CreateSingleNatGateway]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Internet Gateway"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public Subnet 1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - "1"
        - !GetAZs ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public Subnet 2"

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - "2"
        - !GetAZs ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public Subnet 3"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private Subnet 1"
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select
        - "1"
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private Subnet 2"
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select
        - "2"
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private Subnet 3"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: UseEc2InstanceAsNatGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseEc2InstanceAsNatGateway
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseEc2InstanceAsNatGateway
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseEc2InstanceAsNatGateway
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  # NAT-related resources
  #
  # NAT is used to allow instances in private subnets to communicate with AWS
  # services, and pull down code and updates.

  NatGateway1:
    DependsOn: AttachGateway
    Condition: UseNatGatewayCondition
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    DependsOn: AttachGateway
    Condition: CreateMultipleNatGateways
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  NatGateway3:
    DependsOn: AttachGateway
    Condition: CreateMultipleNatGateways
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP3.AllocationId
      SubnetId: !Ref PublicSubnet3

  NatEIP1:
    DependsOn: AttachGateway
    Condition: UseNatGatewayCondition
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatEIP2:
    DependsOn: AttachGateway
    Condition: CreateMultipleNatGateways
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatEIP3:
    DependsOn: AttachGateway
    Condition: CreateMultipleNatGateways
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatRouteTable1:
    Type: AWS::EC2::RouteTable
    Condition: UseNatGatewayCondition
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-nat-1"

  NatRouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: CreateMultipleNatGateways
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-nat-2"

  NatRouteTable3:
    Type: AWS::EC2::RouteTable
    Condition: CreateMultipleNatGateways
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-nat-3"

  NatRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Condition: UseNatGatewayCondition
    Properties:
      RouteTableId: !Ref NatRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  NatRoute2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Condition: CreateMultipleNatGateways
    Properties:
      RouteTableId: !Ref NatRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  NatRoute3:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Condition: CreateMultipleNatGateways
    Properties:
      RouteTableId: !Ref NatRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  PrivateSubnet1NatRouteTable1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseNatGatewayCondition
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref NatRouteTable1

  PrivateSubnet2RouteTable1AssociationSingleNatGateway:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSingleNatGateway
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref NatRouteTable1

  PrivateSubnet3RouteTable1AssociationSingleNatGateway:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSingleNatGateway
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref NatRouteTable1

  PrivateSubnet2NatRouteTable2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateMultipleNatGateways
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref NatRouteTable2

  PrivateSubnet3NatRouteTable3Association3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateMultipleNatGateways
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref NatRouteTable3
  
  #Configure NAT EC2 Instance
  NATDevice:
    Type: AWS::EC2::Instance
    Condition: UseEc2InstanceAsNatGateway
    Properties:
      InstanceType: !Ref NATInstanceType
      KeyName: !Ref NatEc2KeyPairName
      SubnetId: !Ref PublicSubnet1
      SourceDestCheck: 'false'
      ImageId:
        Fn::FindInMap:
        - AWSNATAMI
        - Ref: AWS::Region
        - AMI
      SecurityGroupIds:
        - !Ref NATSecurityGroup 
  
  PrivateRouteNat:
    Type: AWS::EC2::Route
    Condition: UseEc2InstanceAsNatGateway
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId:
        Ref: NATDevice

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Condition: UseEc2InstanceAsNatGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Private

  InboundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Condition: UseEc2InstanceAsNatGateway
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  OutBoundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Condition: UseEc2InstanceAsNatGateway
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  PrivateSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: UseEc2InstanceAsNatGateway
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      NetworkAclId:
        Ref: PrivateNetworkAcl

  NATIPAddress:
    Type: AWS::EC2::EIP
    Condition: UseEc2InstanceAsNatGateway
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId:
        Ref: NATDevice

  #Security groups
  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: UseEc2InstanceAsNatGateway
    Properties:
      GroupDescription: Enable internal access to the NAT device
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - SourceSecurityGroupId: !Ref BastionSecurityGroup
        IpProtocol: tcp
        ToPort: 22
        FromPort: 22
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
  
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/HTTPs ingress
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: !Ref ELBIngressPort
        FromPort: !Ref ELBIngressPort
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-ELBSecurityGroup"

  ELBSecurityGroupToAppEgress:
    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references
    Properties:
      GroupId: !Ref ELBSecurityGroup
      IpProtocol: tcp
      ToPort: !Ref AppIngressPort
      FromPort: !Ref AppIngressPort
      DestinationSecurityGroupId: !Ref AppSecurityGroup

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access from ELB to app
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref ELBSecurityGroup
        IpProtocol: tcp
        ToPort: !Ref AppIngressPort
        FromPort: !Ref AppIngressPort
      - SourceSecurityGroupId: !Ref BastionSecurityGroup
        IpProtocol: tcp
        ToPort: 22
        FromPort: 22
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-AppSecurityGroup"

  AppSecurityGroupFromELBIngress:
    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references
    Properties:
      GroupId: !Ref AppSecurityGroup
      IpProtocol: tcp
      ToPort: !Ref AppIngressPort
      FromPort: !Ref AppIngressPort
      SourceSecurityGroupId: !Ref ELBSecurityGroup

  AppSecurityGroupFromBastionIngress:
    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references
    Properties:
      GroupId: !Ref AppSecurityGroup
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
      SourceSecurityGroupId: !Ref BastionSecurityGroup

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the bastion host
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: !Ref SSHFrom
        IpProtocol: tcp
        ToPort: 22
        FromPort: 22
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 80
        FromPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443
      - CidrIp: 0.0.0.0/0
        IpProtocol: udp
        ToPort: 123
        FromPort: 123
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-BastionSecurityGroup"

  BastionSecurityGroupToAppEgress:
    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
      DestinationSecurityGroupId: !Ref AppSecurityGroup

  BastionSecurityGroupToPostgreSqlDbEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      ToPort: 5432
      FromPort: 5432
      DestinationSecurityGroupId: !Ref DbSecurityGroup

  BastionSecurityGroupToPostgreMySqlDbEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      ToPort: 3306
      FromPort: 3306
      DestinationSecurityGroupId: !Ref DbSecurityGroup

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the RDS DB
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 3306
        FromPort: 3306
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 5432
        FromPort: 5432
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-DbSecurityGroup"

  DbSecurityGroupFromBastionPostgreSqlIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DbSecurityGroup
      IpProtocol: tcp
      ToPort: 5432
      FromPort: 5432
      SourceSecurityGroupId: !Ref BastionSecurityGroup

  DbSecurityGroupFromBastionMySqlIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DbSecurityGroup
      IpProtocol: tcp
      ToPort: 3306
      FromPort: 3306
      SourceSecurityGroupId: !Ref BastionSecurityGroup

  DbSecurityGroupFromAppPostgreSqlIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DbSecurityGroup
      IpProtocol: tcp
      ToPort: 5432
      FromPort: 5432
      SourceSecurityGroupId: !Ref AppSecurityGroup

  DbSecurityGroupFromAppMySqlIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DbSecurityGroup
      IpProtocol: tcp
      ToPort: 3306
      FromPort: 3306
      SourceSecurityGroupId: !Ref AppSecurityGroup
Outputs:
  # VPC:
  #   Description: VPC
  #   Value: !Ref VPC
  # AZ1:
  #   Description: Availability Zone 1
  #   Value: !GetAtt
  #     - PublicSubnet1
  #     - AvailabilityZone
  # AZ2:
  #   Description: Availability Zone 2
  #   Value: !GetAtt
  #     - PublicSubnet2
  #     - AvailabilityZone
  # AZ3:
  #   Description: Availability Zone 3
  #   Value: !GetAtt
  #     - PrivateSubnet3
  #     - AvailabilityZone
  Name:
    Description: VPC Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcID"

  # VpcCidr:
  #   Description: Vpc cidr block
  #   Value: !FindInMap [ CIDRMap, VPC, CIDR ]
  #   Export:
  #     Name: !Sub "${AWS::StackName}-vpc-cidr"

  PublicSubnet1:
    Description: Public subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1ID"

  PublicSubnet2:
    Description: Public subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2ID"

  PublicSubnet3:
    Description: Public subnet 3 ID
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet3ID"

  PrivateSubnet1:
    Description: Private subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1ID"

  PrivateSubnet2:
    Description: Private subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2ID"
  
  PrivateSubnet3:
    Description: Private subnet 3 ID
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet3ID"

  ELBSecurityGroup:
    Description: Security group ID for Internet-facing ELB
    Value: !GetAtt ELBSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-ELBSecurityGroupID"

  AppSecurityGroup:
    Description: Security group ID for app behind ELB
    Value: !GetAtt AppSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-AppSecurityGroupID"

  BastionSecurityGroup:
    Description: Security group ID for bastion host
    Value: !GetAtt BastionSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-BastionGroupID"

  DatabaseSecurityGroup:
    Description: Security group ID for RDS database
    Value: !GetAtt DbSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseGroupID"

  ELBIngressPort:
    Description: ELB ingress port
    Value: !Ref ELBIngressPort
    Export:
      Name: !Sub "${AWS::StackName}-ELBIngressPort"

  AppIngressPort:
    Description: App ingress port
    Value: !Ref AppIngressPort
    Export:
      Name: !Sub "${AWS::StackName}-AppIngressPort"